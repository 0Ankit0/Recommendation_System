@page "/register"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject UserApiClient userApi
@rendermode InteractiveServer

<h3 class="text-center">Register</h3>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="card p-4 shadow">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control"
                        @bind-Value="registerModel.Password" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>

                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" type="password" class="form-control"
                        @bind-Value="registerModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                </div>


                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success">@successMessage</div>
                }

                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Registering...</span>
                    }
                    else
                    {
                        <span>Register</span>
                    }
                </button>
            </EditForm>

            <div class="text-center mt-3">
                <a href="/login">Already have an account? Login</a>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterViewModel registerModel = new RegisterViewModel();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;

    private async Task HandleRegister()
    {
        errorMessage = null;
        successMessage = null;

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        isLoading = true;
        try
        {
            var apiModel = new RegisterRequest
            {
                Email = registerModel.Email,
                Password = registerModel.Password
            };

            var response = await userApi.RegisterAsync(apiModel);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Registration successful! Please check your email to confirm your account.";
                await Task.Delay(2000); // Optional delay for user feedback
                Navigation.NavigateTo("/login");
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                errorMessage = "Registration failed. " + content;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Ensure UI is updated after isLoading changes
        }
    }

    public class RegisterViewModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "Passwords must match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
