@page "/forgot-password"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Forgot Password</h3>

<EditForm Model="forgotPasswordModel" OnValidSubmit="HandleForgotPassword" class="forgot-password-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="forgotPasswordModel.Email" />
        <ValidationMessage For="@(() => forgotPasswordModel.Email)" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Sending...</span>
        }
        else
        {
            <span>Send Reset Link</span>
        }
    </button>
</EditForm>

<div class="mt-3">
    <a href="/login">Back to Login</a>
</div>

@code {
    private ForgotPasswordRequest forgotPasswordModel = new();
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;

    private async Task HandleForgotPassword()
    {
        errorMessage = null;
        successMessage = null;
        isLoading = true;
        try
        {
            var response = await Http.PostAsJsonAsync("/User/forgotPassword", forgotPasswordModel);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "If an account with that email exists, a password reset link has been sent.";
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                errorMessage = "Failed to send reset link. " + content;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
        isLoading = false;
    }

    public class ForgotPasswordRequest
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }
    }
}