@page "/forgot-password"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Forgot Password</h3>

<EditForm FormName="ForgetPasswordForm" Model="forgotPasswordModel" OnValidSubmit="HandleForgotPassword" class="forgot-password-form">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (step == 1)
    {
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" class="form-control" @bind-Value="forgotPasswordModel.Email" />
            <ValidationMessage For="@(() => forgotPasswordModel.Email)" />
        </div>
    }
    else if (step == 2)
    {
        <div class="mb-3">
            <label for="resetCode" class="form-label">Reset Code</label>
            <InputText id="resetCode" class="form-control" @bind-Value="resetPasswordModel.ResetCode" />
            <ValidationMessage For="@(() => resetPasswordModel.ResetCode)" />
        </div>
        <div class="mb-3">
            <label for="newPassword" class="form-label">New Password</label>
            <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetPasswordModel.NewPassword" />
            <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm New Password</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" />
            <ValidationMessage For="@(() => confirmPassword)" />
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>@(step == 1 ? "Send Reset Code" : "Reset Password")</span>
        }
        else
        {
            <span>@(step == 1 ? "Send Reset Code" : "Reset Password")</span>
        }
    </button>
</EditForm>

<div class="mt-3">
    <a href="/login">Back to Login</a>
</div>

@code {
    private ForgotPasswordRequest forgotPasswordModel = new();
    private ResetPasswordRequest resetPasswordModel = new();
    private string confirmPassword = string.Empty;
    private bool isLoading = false;
    private string? errorMessage;
    private string? successMessage;
    private int step = 1; // 1: email, 2: reset

    private async Task HandleForgotPassword()
    {
        errorMessage = null;
        successMessage = null;
        if (step == 1)
        {
            isLoading = true;
            try
            {
                var response = await Http.PostAsJsonAsync("/User/forgotPassword", forgotPasswordModel);
                if (response.IsSuccessStatusCode)
                {
                    step = 2;
                    resetPasswordModel.Email = forgotPasswordModel.Email ?? string.Empty;
                    successMessage = "A reset code has been sent to your email.";
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    errorMessage = "Failed to send reset code. " + content;
                }
            }
            catch (Exception ex)
            {
                errorMessage = "An error occurred: " + ex.Message;
            }
            isLoading = false;
        }
        else if (step == 2)
        {
            if (resetPasswordModel.NewPassword != confirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }
            isLoading = true;
            try
            {
                var response = await Http.PostAsJsonAsync("/User/resetPassword", resetPasswordModel);
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Password reset successful! You may now log in.";
                    // Optionally redirect to login
                    // Navigation.NavigateTo("/login");
                }
                else
                {
                    var content = await response.Content.ReadAsStringAsync();
                    errorMessage = "Password reset failed. " + content;
                }
            }
            catch (Exception ex)
            {
                errorMessage = "An error occurred: " + ex.Message;
            }
            isLoading = false;
        }
    }

    public class ForgotPasswordRequest
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }
    }
    public class ResetPasswordRequest
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        public string ResetCode { get; set; } = string.Empty;
        [MinLength(6)]
        public string NewPassword { get; set; } = string.Empty;
    }
}
